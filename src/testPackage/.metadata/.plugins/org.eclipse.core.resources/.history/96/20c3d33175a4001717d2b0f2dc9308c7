import java.util.Iterator;
import java.util.Stack;

public class StackPractice {

	public static void main(String[] args) {

		// pushing, popping, and peeking a stack
		Stack myStack = new Stack();
		
		myStack.push("Something");
		myStack.push(2);
		myStack.push(44);
		System.out.println(myStack.peek());
		myStack.push("Hello");
		myStack.push("I'm the top element, and I was just popped!");
		System.out.println(myStack.pop());
		System.out.println(myStack.peek());
		
		
		// reverse a string with a stack
		System.out.println("\nReverse a string with a stack: ");
		reverseString("I am a rabbit.");
		reverseString("Hello, how are you doing today?");
		
		
		// check for balanced parentheses in expression
		System.out.println("\nCheck for balanced parentheses, brackets, and braces: ");
		String expression1 = "[(23 * 22) * (21 - 1)]";
		String expression2 = "{(This should not work)]";
		String expression3 = "{((())/)}";
		String expression4 = "(lambda) -> {lambda.add('this').then(doThis([2 + 3]));}";
		String expression5 = "[(|)] + {((}))";
		System.out.println(expression1 + ": " + isBalanced(expression1));
		System.out.println(expression2 + ": " + isBalanced(expression2));
		System.out.println(expression3 + ": " + isBalanced(expression3));
		System.out.println(expression4 + ": " + isBalanced(expression4));
		
		
		// END OF MAIN
	}

	
	// reverse a string using a stack
	public static void reverseString(String str){
		Stack stack = new Stack();
		
		for(int i=0; i<str.length(); i++){
			stack.push(str.charAt(i));
		}
		
		Iterator itr = stack.iterator();
		while(itr.hasNext()){
			System.out.print(stack.pop());
		}
		System.out.println();
	}
	
	
	// check for balanced parentheses in an expression
	public static boolean isBalanced(String str) {
		Stack myStack = new Stack();
		
		for(int i = 0; i<str.length(); i++){
			switch(str.charAt(i)){
			case '{':
			case '[':
			case '(':
				myStack.push(str.charAt(i));
				break;
			case '}':
				if (myStack.peek().equals('{')){
					myStack.pop();
				} else return false;
				break;
			case ']':
				if (myStack.peek().equals('[')){
					myStack.pop();
				} else return false;
				break;
			case ')':
				if (myStack.peek().equals('(')){
					myStack.pop();
				} else return false;
				break;
			}
		}
		return true;
	}
	
	// END OF FILE
}
